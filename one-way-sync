#! /bin/sh
set -e
errors=0

msg2slack()
{
    curl -X POST -k -H 'Content-type: application/json' --data "{\"text\":\"$1\",\"attachments\": [   {  \"fallback\": \"go to build ${BUILD_URL}\",  \"actions\": [ {  \"type\": \"button\", \"text\": \"go to build\", \"url\": \"${BUILD_URL}\"  }  ] }]}" ${SLACK_URL}
}

bfg_cleanup()
{
    java -jar /usr/bin/bfg-1.13.0.jar --strip-blobs-bigger-than ${BFG_SIZE_LIMIT} . > /dev/null
    git reflog expire --expire=now --all
    git gc --prune=now --aggressive
}

abort_merge()
{
      echo "There is a merge conflict on branch $1. Aborting"
      ${NOTIFY_ON_FAILURE} && msg2slack "CONFLICTS at *${PROJECT_NAME}:${PR_NAME}*, aborting. \n sync triggered by ${TRIGGERED_BY}\n"
      git diff --name-only --diff-filter=U
      git merge --abort
      errors=1
      exit $errors
}

delete_locals() {
    # Delete existing branches
    git checkout --detach
    for branch in $(git for-each-ref --format '%(refname:short)' refs/heads); do
    git branch -D $branch
    done
}

get_remotes() 
{    
    # Add and fetch remotes
    git remote add from $SRC_URL  2>/dev/null || git remote set-url from $SRC_URL
    git remote add to   ${DEST_URL}  2>/dev/null || git remote set-url to   ${DEST_URL}
    git fetch --multiple --prune from to
}

merge_current()
{
    git config user.name "${MERGE_COMMIT_AUTHOR}"
    git config user.email "${MERGE_COMMIT_EMAIL}"
    git remote add origin   ${DEST_URL}  2>/dev/null || git remote set-url origin   ${DEST_URL}
    git checkout --track origin/${CI_COMMIT_REF_NAME}
    git merge from/${CI_COMMIT_REF_NAME} --no-edit || abort_merge ${CI_COMMIT_REF_NAME}
}

sync_branches()
{
    for pushfrom in $(git for-each-ref --format '%(refname)' refs/remotes/from); do
    name="${pushfrom##refs/remotes/from/}"
    pushto="refs/remotes/to/$name"
    if ( ! git show-ref $pushto > /dev/null) || git merge-base --is-ancestor $pushto $pushfrom > /dev/null; then
        git branch -f $name $pushfrom
    else
        if  [ "$name" != "${CI_COMMIT_REF_NAME}" ]; then
            echo "Failed to fast-forward $pushfrom to $pushto, relevant commits:"
            git show-ref $name
            ${NOTIFY_ON_FAILURE} && msg2slack "Failed to fast-forward $pushfrom to $pushto at *${PROJECT_NAME}:${PR_NAME}*, aborting. \n sync triggered by ${TRIGGERED_BY}\n"
            errors=1
        fi
    fi
    done
}

main()
{
    delete_locals
    get_remotes
    sync_branches
    merge_current
    ${ENABLE_BFG} && bfg_cleanup
    git pull
    git status
    git push -u --tags --follow-tags to ${CI_COMMIT_REF_NAME}
    git push -u --follow-tags --all 
    ${NOTIFY_ON_SUCCESS} && msg2slack "successful sync at *${PROJECT_NAME}:${PR_NAME}*. \n triggered by ${TRIGGERED_BY}\n"
    exit $errors
}

main